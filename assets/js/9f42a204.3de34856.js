"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[949],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(r),g=o,u=d["".concat(c,".").concat(g)]||d[g]||f[g]||i;return r?n.createElement(u,s(s({ref:t},p),{},{components:r})):n.createElement(u,s({ref:t},p))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=g;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[d]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},4387:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:4},s="Logistic Regression",a={unversionedId:"logestic_reg",id:"logestic_reg",title:"Logistic Regression",description:"mettre une d\xe9finition de Logistic Regression",source:"@site/docs/logestic_reg.md",sourceDirName:".",slug:"/logestic_reg",permalink:"/nlp_project/docs/logestic_reg",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/logestic_reg.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Bag of word and TF IDF",permalink:"/nlp_project/docs/bagofword"},next:{title:"Random forest",permalink:"/nlp_project/docs/random_forest"}},c={},l=[{value:"4.1 Logistic Regression with Bag of words",id:"41-logistic-regression-with-bag-of-words",level:2},{value:"4.2 Logistic Regression with TF-IDF",id:"42-logistic-regression-with-tf-idf",level:2}],p={toc:l};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logistic-regression"},"Logistic Regression"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"mettre une d\xe9finition de Logistic Regression")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"from sklearn.model_selection import train_test_split\nX = df['cleaned_news'].values.tolist()\ny = df['category'].values.tolist()\n")),(0,o.kt)("h2",{id:"41-logistic-regression-with-bag-of-words"},"4.1 Logistic Regression with Bag of words"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"from sklearn.linear_model import LogisticRegressionCV\n\nbow_lr = LogisticRegressionCV(cv=5,n_jobs = 3).fit(cv_train, train_category)\nprint(bow_lr)\n\nbow_lr.scores_\n\nbow_test_predictions = bow_lr.predict(cv_test)\n\nprint(bow_test_predictions)\nprint(test_category)\n\nc = 0\nfor x,y in zip(test_category, bow_test_predictions):\n    if x == y:\n        c+=1\n\nprint('Accuracy:',c/len(test_category))\n# .95\n")),(0,o.kt)("h2",{id:"42-logistic-regression-with-tf-idf"},"4.2 Logistic Regression with TF-IDF"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"from sklearn.linear_model import LogisticRegressionCV\n\ntf_train = tf.transform(X_train)\ntf_test = tf.transform(X_test)\n\nlr = LogisticRegressionCV(cv = 5)\ntfidf_lr = lr.fit(tf_train, train_sentiments)\nprint(tfidf_lr)\n\ntfidf_test_predictions = tfidf_lr.predict(tf_test)\nprint(tf_test.shape)\nprint(tfidf_test_predictions)\nprint(test_category)\n\nc = 0\nfor x,y in zip(test_category, tfidf_test_predictions):\n    if x == y:\n        c+=1\n\nprint('Accuracy:',c/len(test_category))\n\n#Accuracy : .97\n\n save model\nimport pickle\n\n#save the model to disk\nfilename = 'lr_model.sav'\npickle.dump(tfidf_lr, open(filename, 'wb'))\n\n# load the model from disk\nloaded_model = pickle.load(open(filename, 'rb'))\nresult = loaded_model.score(tf_test, test_category)\nprint(result)\n#0.97\n")))}d.isMDXComponent=!0}}]);
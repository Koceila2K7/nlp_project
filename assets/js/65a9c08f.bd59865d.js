"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[943],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>f});var n=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=n.createContext({}),u=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(c.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=s,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?n.createElement(f,o(o({ref:r},l),{},{components:t})):n.createElement(f,o({ref:r},l))}));function f(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=m;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[d]="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1142:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=t(7462),s=(t(7294),t(3905));const a={sidebar_position:5},o="Random forest",i={unversionedId:"random_forest",id:"random_forest",title:"Random forest",description:"Random Forest est un mod\xe8le d'apprentissage automatique utilis\xe9 pour la classification et la r\xe9gression. Il s'agit d'un ensemble de mod\xe8les de d\xe9cision bas\xe9s sur des arbres de d\xe9cision, dans lesquels chaque arbre est entra\xeen\xe9 sur une sous-partie al\xe9atoire des donn\xe9es d'entra\xeenement et sur un sous-ensemble al\xe9atoire de caract\xe9ristiques.",source:"@site/docs/random_forest.md",sourceDirName:".",slug:"/random_forest",permalink:"/nlp_project/docs/random_forest",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/random_forest.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Logistic Regression",permalink:"/nlp_project/docs/logestic_reg"},next:{title:"SVM",permalink:"/nlp_project/docs/svm"}},c={},u=[{value:"5 Random Forest",id:"5-random-forest",level:2}],l={toc:u};function d(e){let{components:r,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"random-forest"},"Random forest"),(0,s.kt)("p",null,"Random Forest est un mod\xe8le d'apprentissage automatique utilis\xe9 pour la classification et la r\xe9gression. Il s'agit d'un ensemble de mod\xe8les de d\xe9cision bas\xe9s sur des arbres de d\xe9cision, dans lesquels chaque arbre est entra\xeen\xe9 sur une sous-partie al\xe9atoire des donn\xe9es d'entra\xeenement et sur un sous-ensemble al\xe9atoire de caract\xe9ristiques."),(0,s.kt)("p",null,"Un arbre de d\xe9cision est un mod\xe8le de pr\xe9diction qui consiste en une s\xe9rie de tests effectu\xe9s sur les caract\xe9ristiques d'un \xe9chantillon pour d\xe9terminer sa classe. Un arbre de d\xe9cision commence par une racine qui repr\xe9sente la variable \xe0 pr\xe9dire et se divise en branches qui repr\xe9sentent les diff\xe9rentes valeurs possibles de cette variable. \xc0 chaque n\u0153ud de l'arbre, on effectue un test sur une caract\xe9ristique et on suit la branche correspondante en fonction du r\xe9sultat de ce test. On continue ainsi jusqu'\xe0 arriver \xe0 une feuille de l'arbre, qui repr\xe9sente la pr\xe9diction finale pour l'\xe9chantillon."),(0,s.kt)("p",null,"Dans un mod\xe8le de for\xeat al\xe9atoire, plusieurs arbres de d\xe9cision sont entra\xeen\xe9s de mani\xe8re ind\xe9pendante et leur sortie est combin\xe9e pour obtenir la pr\xe9diction finale. La pr\xe9diction finale est g\xe9n\xe9ralement obtenue en effectuant la moyenne des pr\xe9dictions de chaque arbre pour la r\xe9gression ou en effectuant un vote majoritaire pour la classification."),(0,s.kt)("p",null,"L'utilisation de plusieurs arbres de d\xe9cision permet de r\xe9duire la variance des pr\xe9dictions et de construire un mod\xe8le plus robuste. Random Forest est souvent utilis\xe9 dans de nombreux domaines, notamment la finance, la m\xe9decine et la science des donn\xe9es, pour pr\xe9dire des variables cibles quantitatives ou qualitatives."),(0,s.kt)("h2",{id:"5-random-forest"},"5 Random Forest"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(max_depth=10, random_state=0)\nbow_rf = rf.fit(cv_train, train_category)\n\nbow_rf_test_predictions = bow_rf.predict(cv_test)\n\nprint(bow_rf_test_predictions)\nprint(test_category)\n\nc = 0\nfor x,y in zip(test_category, bow_rf_test_predictions):\n    if x == y:\n        c+=1\n\nprint('Accuracy:',c/len(test_category))\n#Accuracy: 0.8314606741573034\n")))}d.isMDXComponent=!0}}]);